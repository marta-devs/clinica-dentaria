// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Paciente {
  id            Int        @id @default(autoincrement())
  nome          String
  sobreNome     String
  data_nasc     String
  sexo          String
  nacionalidade String
  telefone      String     @unique
  email         String     @unique
  endereco      String
  Usuario       Usuario[]
  Consulta      Consulta[]
}

model Usuario {
  id            String @id @default(uuid())
  cargo         String
  senha         String
  pacienteId    Int?
  funcionarioId Int?
  login         String @unique

  paciente    Paciente?    @relation(fields: [pacienteId], references: [id])
  funcionario Funcionario? @relation(fields: [funcionarioId], references: [id])
}

model Funcionario {
  id       Int       @id @default(autoincrement())
  nome     String
  telefone String
  email    String
  Usuario  Usuario[]
}

model Dentista {
  id                Int        @id @default(autoincrement())
  nome              String
  especialidade     String
  NCarteira         String     @unique
  status            String
  semanaAtendimento String?
  email             String?
  telefone          String?
  endereco          String?
  horaStart         Int
  horaEnd           Int
  Consulta          Consulta[]
}

model Tipo_consulta {
  id            Int        @id @default(autoincrement())
  tipo_consulta String
  preco         Float
  desconto      Float
  Consulta      Consulta[]
}

model Consulta {
  id Int @id @default(autoincrement())

  status        String
  observado     String?
  hora_consulta Int
  data_consulta String

  pacienteId      Int
  dentistaId      Int
  tipo_consultaId Int

  paciente       Paciente      @relation(fields: [pacienteId], references: [id])
  dentista       Dentista      @relation(fields: [dentistaId], references: [id])
  tipo_consulta  Tipo_consulta @relation(fields: [tipo_consultaId], references: [id])
  Pagamento      Pagamentos[]
  data_criacao   DateTime      @default(now())
  data_alteracao DateTime      @updatedAt
}

model Pagamentos {
  idPagemento    Int      @id @default(autoincrement())
  data           DateTime @default(now())
  formaPagamento String
  valor          Float
  status         String

  consultaId Int
  consulta   Consulta @relation(fields: [consultaId], references: [id])
}
